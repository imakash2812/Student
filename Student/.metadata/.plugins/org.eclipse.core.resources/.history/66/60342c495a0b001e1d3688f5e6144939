package com.example.demo.controller;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.List;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.slf4j.Logger;

import com.example.demo.model.Student;
import com.example.demo.repo.StudentRepository;
import com.example.demo.service.StudentServiceImpl;
import com.itextpdf.text.DocumentException;


@RequestMapping("/Student")
@RestController
public class StudentController {

	private static final Logger Logger=LoggerFactory.getLogger(StudentController.class);

	
	@Autowired
	 private StudentServiceImpl studentServiceImpl;
	
	@Autowired
	private StudentRepository studentRepository;
	
	@PostMapping("add_student_details")
	public ResponseEntity<Student> addStudentDetails(@RequestBody StudentDto studentDto) {
		studentServiceImpl.addStudentDetails(studentDto);
		return ResponseEntity.ok().body(studentDto);
	}
	
	@GetMapping("/get_student_details_by_/{id}")
	public Student getStudentDetailsById(@PathVariable (value="id") String Id){
		return studentServiceImpl.getStudentDetailsById(Id);
		
	}
	
	@GetMapping("get_student_details_by_/name")
	public Student getStudentDetailsByName(@RequestParam(value="name") String name){
		return studentServiceImpl.getStudentDetailsByName(name);
	}
	
	@GetMapping("get_student_details_by_roll_no/{rollnumber}")
	public Student getStudentDetailsByRollNumber(@PathVariable (value="rollnumber") String rollnumber){
		return studentServiceImpl.getStudentDetailsByRollNumber(rollnumber);
	}
	
	@GetMapping("/get_all_student_list")
	public List<Student> getAllStudentList(){
		return studentServiceImpl.getAllStudentList();
	}
	
	@GetMapping("/get_all_student_list by search")
	public List<Student> getAllStudentList(@RequestParam(required = false) String query) {
	    if (query != null && !query.isEmpty()) {
	        return studentServiceImpl.searchStudentsByName(query);
	    } else {
	        return studentServiceImpl.getAllStudentList();
	    }
	}
	@GetMapping("/get_all_student_list by anykeyword")
	public List<Student> getAllStudentList(
			@RequestParam(required = false) String name,
	        @RequestParam(required = false) String rollNumber,
	        @RequestParam(required = false) String branch) {
//		
 if (name != null) {
	        return studentServiceImpl.searchStudentsByName(name);
	    } else if (rollNumber != null) {
	        return studentServiceImpl.searchStudentsByRollNumber(rollNumber);
	    } else if (branch != null) {
	        return studentServiceImpl.searchStudentsByBranch(branch);
	    } else {
	        return studentServiceImpl.getAllStudentList();
	    }
	}

	
	@PutMapping("/update_student/{id}")
	public ResponseEntity<Student>updateStudentById(@RequestBody Student student, @PathVariable (value="id") String _Id){
		return studentServiceImpl.updateStudentById(student,_Id);
}
	
	@DeleteMapping("delete_student_by_id/{id}")
	public ResponseEntity<Student>deleteStudentById(@PathVariable (value="id") String _id){
		return studentServiceImpl.deleteStudentById(_id);
	}
	
	@GetMapping("/search/{query}")
	public List<Student> search(@PathVariable("query") String query) {
	    System.out.println(query);
	    List<Student> students = this.studentRepository.findByQueryContainingIgnoreCase(query);
	    return students;
	}

	
	
	//==============================Read Data from the Excel file and Save that data into the database===============================

//    @ApiOperation(value = "Upload a document")
	@PostMapping("/dumping_data_from_excel_file")
    public ResponseEntity<Object> DumpingDataFromEcxelFile(@RequestParam("file") MultipartFile file) {
        try {
            studentServiceImpl.dumpingDataFromExcelFile(file);
            return ResponseEntity.ok("Data uploaded successfully");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Failed to upload data: " + e.getMessage());
        }
	}

	@PostMapping("/dumping_data_from_csv_file")
	public ResponseEntity<String> dumpingDataFromCSVFile(@RequestPart("file") MultipartFile file) {
	    try {
	        studentServiceImpl.dumpingDataFromCSVFile(file);
	        return ResponseEntity.ok("Data uploaded successfully");
	    } catch (Exception e) {
	    	e.printStackTrace();
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Failed to upload data: " + e.getMessage());
	    }
	}
	
//	@PostMapping("uploaddata")
//	public void dumpingDataFromCSVFile1(@RequestParam("file") MultipartFile file) throws IOException {
//	    List<Student> dataList = studentServiceImpl.readDataFromCSV(file);
//	    System.out.println(dataList);
//	    studentRepository.saveAll(dataList);
//	}

	
//==============================UPLOAD ANY SPECIFIC FILE on server(PDF,EXCEL,WORD etc.)==========================================

	
	@PostMapping("/upload_specific_file")
    public ResponseEntity<String> uploadAnySpecificFile(@RequestPart("file") MultipartFile file) {
        try {
            // Validation
            if (file.isEmpty()) {
            	Logger.info("Request must contain a file");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Request must contain a file");
            }
            if(!file.getContentType().equals("application/pdf")) {
            	Logger.warn("Only PDF content type is allowed.");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Only PDF content type is allowed.");
            }

            // File upload code
            boolean success = studentServiceImpl.uploadAnySpecificFile(file) != null;
            if (success) {
            	Logger.info("File uploaded successfully.");
                return ResponseEntity.ok("File uploaded successfully.");
            }
        } catch (Exception e) {
            Logger.error("An error occurred while uploading the file", e);
        }

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong! Please try again.");
    }
	
//=========================================UPLOAD MULTIPLE FILES OF ANY TYPE======================================================

	
	@PostMapping("/upload_multiple_anytype_files")
    public ResponseEntity<String> uploadMultipleFiles(@RequestPart("file") MultipartFile[] multipartFiles) {
        Logger.info("{} number of files uploaded", multipartFiles.length);

        try {
            studentServiceImpl.uploadMultipleFiles(multipartFiles);
            return ResponseEntity.ok("Files uploaded successfully");
        } catch (Exception e) {
            Logger.error("An error occurred while uploading files", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to upload files");
        }
    }
//		Arrays.stream(multipartFile).forEach(File ->{
//			Logger.info("file name: {} ",File.getOriginalFilename());
//			Logger.info("file name: {} ",File.getContentType());
//			System.out.println("++++++++++++++++++++++++");
//
//		});
//		return ResponseEntity.ok("file uploaded");
//	}


	    @GetMapping("/download/pdf")
	    public ResponseEntity<InputStreamResource> generatePdfFromDB() throws IOException, DocumentException {
	        ByteArrayInputStream pdfBytes = studentServiceImpl.createPdf();
	        HttpHeaders headers = new HttpHeaders();
	        headers.setContentType(MediaType.APPLICATION_PDF);
	        headers.setContentDispositionFormData("attachment", "application.pdf");
	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
//	        return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
	        return ResponseEntity.ok().headers(headers).contentType(MediaType.APPLICATION_PDF).body(new InputStreamResource(pdfBytes));
	    }
	    
	    @GetMapping("/download/word")
	    public ResponseEntity<InputStreamResource> generateWordFromDB() throws IOException {
	        ByteArrayInputStream docBytes = studentServiceImpl.createDocument();
	        HttpHeaders headers = new HttpHeaders();
	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	        headers.setContentDispositionFormData("attachment", "document.docx");
	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");

	        return ResponseEntity.ok()
	                .headers(headers)
	                .contentType(MediaType.APPLICATION_OCTET_STREAM)
	                .body(new InputStreamResource(docBytes));
	    }
	    
//	    @GetMapping("/word_document")
//	    public ResponseEntity<byte[]> generateDocument() throws IOException, DocumentException {
//	        byte[] documentBytes = studentServiceImpl.generateWordDocument();
//	        HttpHeaders headers = new HttpHeaders();
//	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
//	        headers.setContentDispositionFormData("attachment", "application.docx");
//	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
//	        return new ResponseEntity<>(documentBytes, headers, HttpStatus.OK);
//	    }
	   
	    @GetMapping("/download/csv")
	    public ResponseEntity<InputStreamResource> generateCSVFromDB() throws IOException {
	        ByteArrayInputStream csvBytes = studentServiceImpl.createCSVDocument();
	        HttpHeaders headers = new HttpHeaders();
	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	        headers.setContentDispositionFormData("attachment", "document.csv");
	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");

	        return ResponseEntity.ok()
	                .headers(headers)
	                .contentType(MediaType.APPLICATION_OCTET_STREAM)
	                .body(new InputStreamResource(csvBytes));
	    }
	    
//	    @GetMapping("/document/csv")
//	    public ResponseEntity<byte[]> generateCsvDocument() throws IOException {
//	        byte[] csvBytes = studentServiceImpl.generateCsvDocument();
//	        HttpHeaders headers = new HttpHeaders();
//	        headers.setContentType(MediaType.TEXT_PLAIN);
//	        headers.setContentDispositionFormData("attachment", "application.csv");
//	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
//	        return new ResponseEntity<>(csvBytes, headers, HttpStatus.OK);
//	    }
	    
	    @GetMapping("/download/excel")
	    public ResponseEntity<InputStreamResource> generateExcelFromDB() throws IOException {
	        ByteArrayInputStream excelBytes = studentServiceImpl.createExcelDocument();
	        HttpHeaders headers = new HttpHeaders();
	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	        headers.setContentDispositionFormData("attachment", "document.xlsx");
	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");

	        return ResponseEntity.ok()
	                .headers(headers)
	                .contentType(MediaType.APPLICATION_OCTET_STREAM)
	                .body(new InputStreamResource(excelBytes));
	    }

//	    @GetMapping("/document/excel")
//	    public ResponseEntity<byte[]> generateExcelDocument() throws IOException {
//	        byte[] excelBytes = studentServiceImpl.generateExcelDocument();
//	        HttpHeaders headers = new HttpHeaders();
//	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
//	        headers.setContentDispositionFormData("attachment", "users.xlsx");
//	        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
//	        return new ResponseEntity<>(excelBytes, headers, HttpStatus.OK);
//	    }
	

	    

}
