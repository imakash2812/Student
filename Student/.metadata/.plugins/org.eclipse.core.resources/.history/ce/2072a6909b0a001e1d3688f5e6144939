package com.example.demo.service;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.helper.FileUploadHelper;
import com.example.demo.model.Student;
import com.example.demo.repo.StudentRepository;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.opencsv.CSVWriter;

@Service
public class StudentServiceImpl{
	
	@Autowired
	private StudentRepository studentRepository;
	
	@Autowired
	private FileUploadHelper fileUploadHelper;
	
	
	private static final Logger Logger=LoggerFactory.getLogger(StudentServiceImpl.class);

	
	public ResponseEntity<Student> addStudentDetails(Student student) {
		try {
		Optional<Student> stud=studentRepository.findByName(student.getName());
		if(!stud.isPresent()) {
			student.setName(student.getName());
			student.setRollNumber(student.getRollNumber());
			student.setBranch(student.getBranch());
			studentRepository.save(student);	
			Logger.info("Student details with name: " +student.getName()+ " are added successfully."+student);
//			return new Response<Object>(200,"Thanks, Student Details are added Successfully..");
			return ResponseEntity.ok(student);
		
		}
		else {
			Logger.info("Student details with name: " +student.getName()+ " are already exist");
//			return new Response<>(201, "Student details already exist");
			return null;
			}
		}
		catch(Exception e) {
			Logger.debug("Failed to add Student Details + " + student.getName());
//			return new Response<>(205, "Failed to add Student Details");
			return null;
		
	}
	}
	
	public Student getStudentDetailsById(String id) {
	    try {
	        Optional<Student> optionalStudent = studentRepository.findById(id);
	        
	        if (optionalStudent.isPresent()) {
	            Student student = optionalStudent.get();
	            Logger.info("Student details with id: " + id + "  fetched successfully.");
//	            return new Response<>(200, "Student details fetched successfully.", student);
	            return student;
	        } else {
	        	Logger.debug("Student details with id: " + id + " not found.");
//	            return new Response<>(404, "Student details with id: " + id + " not found.", null);
	        	return null;
	        }
	    } catch (Exception e) {
	        e.printStackTrace(); // Print the exception details for debugging purposes
			Logger.debug("An error occurred while fetching student details with id: " + id);

//	        return new Response<>(500, "An error occurred while fetching student details.", null);
			return null;
	    }
	}




	public Student getStudentDetailsByName(String name) {
		try {
	        Optional<Student> optionalStudent = studentRepository.findByName(name);
	        
	        if (optionalStudent.isPresent()) {
	            Student student = optionalStudent.get();
	            Logger.info("Student details with name: "+ name +" fetched successfully.");
	            return student;
//	            return new Response<>(200, "Student details fetched successfully.", student);
	        } else {
	        	Logger.debug("Student details with name: " + name + " is not found.");
	        	return null;
//	            return new Response<>(404, "Student details with name: " + name + " is not found.", null);
	        }
	    } catch (Exception e) {
//	        return new Response<>(500, "An error occurred while fetching student details.", null);
	    	Logger.debug("An error occurred while fetching student details."+name);
	    	return null;
	    }
	}



	public Student getStudentDetailsByRollNumber(String RollNumber) {
		try {
	        Optional<Student> optionalStudent = studentRepository.findByRollNumber(RollNumber);
	        
	        if (optionalStudent.isPresent()) {
	            Student student = optionalStudent.get();
	            Logger.info("Student details with Roll Number: " + RollNumber + " fetched successfully.");
	            return student;
//	            return new Response<>(200, "Student details fetched successfully.", student);
	        } else {
	        	Logger.debug("Student details with Roll Number: " + RollNumber + " is not found.");
	        	return null;
//	            return new Response<>(404, "Student details with Roll Number: " + RollNumber + " is not found.", null);
	        }
	    } catch (Exception e) {
	    	Logger.debug("An error occurred while fetching student details with Roll Number: " + RollNumber);
//	        return new Response<>(500, "An error occurred while fetching student details.", null);
	    	return null;
	    }
	}



	public List<Student> getAllStudentList() {
	    List<Student> student = studentRepository.findAll();
	    if(student.isEmpty()) {
//	    	return new Response<>(404, "List Not Found");
	    	Logger.debug("List Not Found"+student);
	    	return null;
	    }else
	    {
		Logger.info("List fetched Successfully"+student);
	    return student;
	    }
	}

	

	


	public ResponseEntity<Student> updateStudentById(Student student, String _id) {
	    try {
	        Optional<Student> optionalStudent = studentRepository.findById(_id);

	        if (optionalStudent.isPresent()) {
	            Student existingStudent = optionalStudent.get();

	            // Update the fields of the existing student with the new values
	            existingStudent.setName(student.getName());
	            existingStudent.setRollNumber(student.getRollNumber());
	            existingStudent.setBranch(student.getBranch());

	            // Save the updated student
	            studentRepository.save(existingStudent);

	            Logger.info("Student details by id: " + _id + " updated successfully" + existingStudent);
	            return ResponseEntity.ok(existingStudent); // Return the updated student in the response
	        } else {
	            Logger.debug("Student with ID: " + _id + " not found");
	            return ResponseEntity.notFound().build(); // Return a 404 response
	        }
	    } catch (Exception e) {
	        Logger.debug("An error occurred while updating student details with id: " + _id);
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Return a 500 response
	    }
	}



	public ResponseEntity<Student> deleteStudentById(String _id) {
	    try {
	        Optional<Student> optionalStudent = studentRepository.findById(_id);
	        if (optionalStudent.isPresent()) {
	            studentRepository.deleteById(_id);
	            Logger.info("Student with id: " + _id + " deleted Successfully.");
	            return ResponseEntity.ok().build();
	        } else {
	            Logger.debug("Student with ID: " + _id + " not found");
	            return ResponseEntity.notFound().build();
	        }
	    } catch (Exception e) {
	        Logger.debug("An error occurred while delete student details with id: " + _id);
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }
	}


//==============================UPLOAD ANY SPECIFIC FILE on Server(PDF,EXCEL,WORD etc.)==========================================
	
	public ResponseEntity<String> uploadAnySpecificFile(MultipartFile file) {
		try {
			boolean f=fileUploadHelper.uploadFile(file);
			if(f) {
				return ResponseEntity.ok("File uploaded Successfully.");
			}
			}catch(Exception e) {
				e.printStackTrace();
			}
			
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("something went wrong! Try again");
	}
	
//==============================UPLOAD MULTIPLE FILES OF ANY TYPE======================================================

	public void uploadMultipleFiles(MultipartFile[] multipartFiles) {
		 for (MultipartFile file : multipartFiles) {
	            String filename = file.getOriginalFilename();
	            String contentType = file.getContentType();
	            try {
	            	
	                // Save the file into MongoDB using the StudentRepository
	                Student student = new Student();
	                student.setFilename(filename);
	                student.setContentType(contentType);
	                student.setFileData(file.getBytes());
	                studentRepository.save(student);
	                
	                Logger.info("File name: {}", filename);
	                Logger.info("Content type: {}", contentType);
	                Logger.info("File size: {} bytes", file.getSize());
	                Logger.info("File uploaded successfully");
	            } catch (Exception e) {
	                Logger.error("An error occurred while uploading file: {}", filename, e);
	            }
	     
	}
	}

//==============================Read Data from the Excel file and Save that data into the database===============================
	
	public void dumpingDataFromExcelFile(MultipartFile file) throws IOException {
	    if (file == null) {
	        throw new IllegalArgumentException("File cannot be null");
	    }

	    List<Student> dataList;
	    String filename = file.getOriginalFilename();
	    if (filename != null && filename.endsWith(".xls")) {
	        dataList = readDataFromHSSFExcel(file);
	    } else {
	        dataList = readDataFromXSSFExcel(file);
	    }

	    studentRepository.saveAll(dataList);
	}

	public List<Student> readDataFromXSSFExcel(MultipartFile file) throws IOException {
	    List<Student> dataList = new ArrayList<>();

	    // Verify that the file is a valid XSSF Excel file
	    if (!isXSSFExcelFile(file)) {
	        throw new IllegalArgumentException("Invalid XSSF Excel file");
	    }

	    try (InputStream is = file.getInputStream();
	         Workbook workbook = new XSSFWorkbook(is)) {
	        // Get the first sheet of the workbook
	        Sheet sheet = workbook.getSheetAt(0);

	        // Iterate over rows in the sheet
	        for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
	            Row row = sheet.getRow(rowIndex);
	            if (row == null) {
	                continue;
	            }

	            // Create a new Student object
	            Student data = new Student();

	            // Read cell values and set them in the Student object
	            Cell nameCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (nameCell != null && nameCell.getCellType() == CellType.STRING) {
	                data.setName(nameCell.getStringCellValue());
	            }

	            Cell rollNumberCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (rollNumberCell != null && rollNumberCell.getCellType() == CellType.STRING) {
	                data.setRollNumber(rollNumberCell.getStringCellValue());
	            }

	            Cell branchCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (branchCell != null && branchCell.getCellType() == CellType.STRING) {
	                data.setBranch(branchCell.getStringCellValue());
	            }

	            // Add the Student object to the dataList
	            dataList.add(data);
	        }
	    }

	    return dataList;
	}

	private boolean isXSSFExcelFile(MultipartFile file) {
	    // Check the file extension to ensure it is an XSSF Excel file
	    String fileName = file.getOriginalFilename();
	    if (fileName != null && fileName.endsWith(".xlsx")) {
	        return true;
	    }
	    return false;
	}



	public List<Student> readDataFromHSSFExcel(MultipartFile file) throws IOException {
	    List<Student> dataList = new ArrayList<>();

	    try (InputStream is = file.getInputStream();
	         Workbook workbook = new HSSFWorkbook(is)) {
	    	// Get the first sheet of the workbook
	        Sheet sheet = workbook.getSheetAt(0);

	        // Iterate over rows in the sheet
	        for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
	            Row row = sheet.getRow(rowIndex);
	            if (row == null) {
	                continue;
	            }

	            // Create a new Student object
	            Student data = new Student();

	            // Read cell values and set them in the Student object
	            Cell nameCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (nameCell != null && nameCell.getCellType() == CellType.STRING) {
	                data.setName(nameCell.getStringCellValue());
	            }

	            Cell rollNumberCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (rollNumberCell != null && rollNumberCell.getCellType() == CellType.STRING) {
	                data.setRollNumber(rollNumberCell.getStringCellValue());
	            }

	            Cell branchCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
	            if (branchCell != null && branchCell.getCellType() == CellType.STRING) {
	                data.setBranch(branchCell.getStringCellValue());
	            }

	            // Add the Student object to the dataList
	            dataList.add(data);
	        }
	    }

	    return dataList;
	}

	   

	
//	public void DumpingDataFromEcxelFile(MultipartFile file) throws IOException {
//	    if (file == null) {
//	        throw new IllegalArgumentException("File cannot be null");
//	    }
//
//	    List<Student> dataList = readDataFromExcel(file);
//	    studentRepository.saveAll(dataList);
//	}
//
//
//	private List<Student> readDataFromExcel(MultipartFile file) throws IOException {
//		List<Student> dataList = new ArrayList<>();
//
//	    // Load the Excel file
//	    try (InputStream is = file.getInputStream();
//	         Workbook workbook = new XSSFWorkbook(is)) {
//
//	        // Get the first sheet of the workbook
//	        Sheet sheet = workbook.getSheetAt(0);
//
//	        // Iterate over rows in the sheet
//	        for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
//	            Row row = sheet.getRow(rowIndex);
//	            if (row == null) {
//	                continue;
//	            }
//
//	            // Create a new Student object
//	            Student data = new Student();
//
//	            // Read cell values and set them in the Student object
//	            Cell nameCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
//	            if (nameCell != null && nameCell.getCellType() == CellType.STRING) {
//	                data.setName(nameCell.getStringCellValue());
//	            }
//
//	            Cell rollNumberCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
//	            if (rollNumberCell != null && rollNumberCell.getCellType() == CellType.STRING) {
//	                data.setRollNumber(rollNumberCell.getStringCellValue());
//	            }
//
//	            Cell branchCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
//	            if (branchCell != null && branchCell.getCellType() == CellType.STRING) {
//	                data.setBranch(branchCell.getStringCellValue());
//	            }
//
//	            // Add the Student object to the dataList
//	            dataList.add(data);
//	        }
//	    }
//
//	    return dataList;
//	}

	
	//==============================Read Data from the CSV file and Save that data into the database===============================


	public void dumpingDataFromCSVFile(MultipartFile file) throws IOException {
	    List<Student> dataList = readDataFromCSV(file);
	    studentRepository.saveAll(dataList);
	}


	public List<Student> readDataFromCSV(MultipartFile file) throws IOException {
	    List<Student> dataList = new ArrayList<>();

	    // Read the CSV file using BufferedReader
	    try (InputStream is = file.getInputStream();
	         InputStreamReader isr = new InputStreamReader(is);
	         BufferedReader br = new BufferedReader(isr)) {
	        String line;
	        boolean firstLine = true;

	        while ((line = br.readLine()) != null) {
	            if (firstLine) {
	                firstLine = false;
	                continue; // Skip the header row
	            }

	            // Split the line by comma to get individual values
	            String[] values = line.split(",");

	            // Create a new Student object and set the values
	            Student data = new Student();
//	            data.set_id(values[0]);
	            data.setName(values[1]);
	            data.setRollNumber(values[2]);
	            data.setBranch(values[3]);

	            // Add the Student object to the dataList
	            dataList.add(data);
	        }
	    }

	    return dataList;
	}


	public Student save(Student student) {
		return this.studentRepository.save(student);
	}


	public Optional<Student> findById(String _id) {
		return this.studentRepository.findById(_id);
	}


	public List<Student> findAll() {
		return this.studentRepository.findAll();
	}
	
	public List<Student> searchStudentsByQuery(String query) {
        return studentRepository.findByQueryContainingIgnoreCase(query);
    }

//	public List<Student> getAllStudentList() {
//        return studentRepository.findAll();
//    }

//	public List<Student> searchStudentsById(String _id) {
//        return studentRepository.findByIdContainingIgnoreCase(_id);
//	}

    public List<Student> searchStudentsByName(String name) {
        return studentRepository.findByNameContainingIgnoreCase(name);
    }

    public List<Student> searchStudentsByRollNumber(String rollNumber) {
        return studentRepository.findByRollNumberContainingIgnoreCase(rollNumber);
    }

    public List<Student> searchStudentsByBranch(String branch) {
        return studentRepository.findByBranchContainingIgnoreCase(branch);
    }

	public void deleteEmployeeById(String _id) {
		studentRepository.deleteById(_id);
		
	}


	public Optional findByName(String name) {
		return this.studentRepository.findByName(name);
	}


	public Optional findByRollNumber(String rollNumber) {
		return this.studentRepository.findByRollNumber(rollNumber);
	}


//	public byte[] generatePdf() throws IOException, DocumentException {
//        List<Student> stud = studentRepository.findAll();
//        ByteArrayOutputStream out = new ByteArrayOutputStream();
//        Document document = new Document();
//        PdfWriter.getInstance(document, out);
//
//        document.open();
//        for (Student student : stud) {
//            Paragraph paragraph = new Paragraph(student.get_id() + " - " + student.getName() +" - "+ student.getRollNumber() + " - " + student.getBranch() +" - " + student.getFileData() +" - " + student.getContentType());
//            document.add(paragraph);
//        }
//        document.close();
//
//        return out.toByteArray();
//    }
	public ByteArrayInputStream createPdf() {
		Logger.info("create PDF Started: ");

	    // Retrieve data from the database
	    List<Student> students = studentRepository.findAll();

	    ByteArrayOutputStream out = new ByteArrayOutputStream();
	    Document document = new Document();

	    try {
	        PdfWriter.getInstance(document, out);
	        document.open();

	        // Code to Add Title
	        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20);
	        Paragraph titlePara = new Paragraph("Student Details", titleFont);
	        titlePara.setAlignment(Element.ALIGN_CENTER);
	        document.add(titlePara);

	        // Code to Add Content
	        Font paraFont = FontFactory.getFont(FontFactory.HELVETICA, 18);

	        for (Student student : students) {
	            Paragraph paragraph = new Paragraph("Name: " + student.getName(), paraFont);
	            document.add(paragraph);

	            paragraph = new Paragraph("Roll Number: " + student.getRollNumber(), paraFont);
	            document.add(paragraph);

	            paragraph = new Paragraph("Branch: " + student.getBranch(), paraFont);
	            document.add(paragraph);

	            // Add spacing between student records
	            document.add(Chunk.NEWLINE);
	        }

	        document.close();
	    } catch (DocumentException e) {
	    	Logger.error("Error occurred while creating PDF: " + e.getMessage());
	    }

	    return new ByteArrayInputStream(out.toByteArray());
	}

	public ByteArrayInputStream createDocument() {
	    Logger.info("create Document Started: ");

	    // Retrieve data from the database
	    List<Student> students = studentRepository.findAll();

	    ByteArrayOutputStream out = new ByteArrayOutputStream();
	    XWPFDocument document = new XWPFDocument();

	    try {
	        // Add Title
	        XWPFParagraph titleParagraph = document.createParagraph();
	        titleParagraph.setAlignment(ParagraphAlignment.CENTER);

	        XWPFRun titleRun = titleParagraph.createRun();
	        titleRun.setText("");
	        titleRun.setBold(true);
	        titleRun.setFontSize(20);

	        // Add Content
	        XWPFParagraph contentParagraph;
	        XWPFRun contentRun;

	        for (Student student : students) {
	            // Add Name
	            contentParagraph = document.createParagraph();
	            contentRun = contentParagraph.createRun();
	            contentRun.setText("Name: " + student.getName());

	            // Add Roll Number
	            contentParagraph = document.createParagraph();
	            contentRun = contentParagraph.createRun();
	            contentRun.setText("Roll Number: " + student.getRollNumber());

	            // Add Branch
	            contentParagraph = document.createParagraph();
	            contentRun = contentParagraph.createRun();
	            contentRun.setText("Branch: " + student.getBranch());

	            // Add spacing between student records
	            document.createParagraph();
	        }

	        // Write the document content to the output stream
	        document.write(out);
	    } catch (IOException e) {
	        Logger.error("Error occurred while creating Word document: " + e.getMessage());
	    } finally {
	        // Close the document and ignore any exceptions
	        try {
	            document.close();
	        } catch (IOException e) {
	            Logger.error("Error occurred while closing Word document: " + e.getMessage());
	        }
	    }

	    return new ByteArrayInputStream(out.toByteArray());
	}

	
//	public ByteArrayInputStream createDocument() {
//        Logger.info("create Document Started: ");
//
//        // Retrieve data from the database
//        List<Student> students = studentRepository.findAll();
//
//        ByteArrayOutputStream out = new ByteArrayOutputStream();
//        XWPFDocument document = new XWPFDocument();
//
//        try {
//            // Add Title
//            XWPFParagraph titleParagraph = document.createParagraph();
//            titleParagraph.setAlignment(ParagraphAlignment.CENTER);
//
//            XWPFRun titleRun = titleParagraph.createRun();
//            titleRun.setText("Student Details");
//            titleRun.setBold(true);
//            titleRun.setFontSize(20);
//
//            // Add Content
//            XWPFParagraph contentParagraph;
//            XWPFRun contentRun;
//
//            for (Student student : students) {
//                // Add Name
//                contentParagraph = document.createParagraph();
//                contentRun = contentParagraph.createRun();
//                contentRun.setText("Name: " + student.getName());
//
//                // Add Roll Number
//                contentParagraph = document.createParagraph();
//                contentRun = contentParagraph.createRun();
//                contentRun.setText("Roll Number: " + student.getRollNumber());
//
//                // Add Branch
//                contentParagraph = document.createParagraph();
//                contentRun = contentParagraph.createRun();
//                contentRun.setText("Branch: " + student.getBranch());
//
//                // Add spacing between student records
//                document.createParagraph();
//            }
//
//            document.write(out);
//            document.close();
//        } catch (IOException e) {
//            Logger.error("Error occurred while creating Word document: " + e.getMessage());
//        }
//
//        return new ByteArrayInputStream(out.toByteArray());
//    }
	
//		public byte[] generateWordDocument() throws IOException {
//	        List<Student> students = studentRepository.findAll();
//	        XWPFDocument document = new XWPFDocument();
//
//	        for (Student student : students) {
//	            XWPFParagraph paragraph = document.createParagraph();
//	            XWPFRun run = paragraph.createRun();
//	            run.setText(student.get_id() + " - " + student.getName() +" - "+ student.getRollNumber() + " - " + student.getBranch() +" - " + student.getFileData() +" - " + student.getContentType());
//	        }
//
//	        ByteArrayOutputStream out = new ByteArrayOutputStream();
//	        document.write(out);
//	        document.close();
//
//	        return out.toByteArray();
//	    }

	public ByteArrayInputStream createCSVDocument() {
	    Logger.info("create Document Started: ");

	    // Retrieve data from the database
	    List<Student> students = studentRepository.findAll();

	    ByteArrayOutputStream out = new ByteArrayOutputStream();

	    try (OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {
	        // Write CSV header
	        writer.write("Name,RollNumber,Branch\n");

	        // Write student data
	        for (Student student : students) {
	            writer.write(student.getName() + ",");
	            writer.write(student.getRollNumber() + ",");
	            writer.write(student.getBranch() + "\n");
	        }
	    } catch (IOException e) {
	        Logger.error("Error occurred while creating CSV document: " + e.getMessage());
	    }

	    return new ByteArrayInputStream(out.toByteArray());
	}
//		public byte[] generateCsvDocument() throws IOException {
//	        List<Student> students = studentRepository.findAll();
//	        StringWriter stringWriter = new StringWriter();
//	        CSVWriter csvWriter = new CSVWriter(stringWriter);
//
//	        String[] header= {"_id", "name", "Roll Number", "branch", "contentType", "fileData"};
//	        csvWriter.writeNext(header);
//
//	        for (Student student : students) {
//	            String[] row={student.get_id(), student.getName(), student.getRollNumber(), student.getBranch(), student.getContentType()};
//	       
//
//	        csvWriter.writeNext(row);
//		}
//		csvWriter.flush();
//		csvWriter.close();
//
//	        return stringWriter.toString().getBytes(StandardCharsets.UTF_8);
//}

	public ByteArrayInputStream createExcelDocument() {
	    Logger.info("create Document Started: ");

	    // Retrieve data from the database
	    List<Student> students = studentRepository.findAll();

	    ByteArrayOutputStream out = new ByteArrayOutputStream();
	    Workbook workbook = new XSSFWorkbook();

	    // Create a new sheet
	    Sheet sheet = workbook.createSheet("Student Data");

	    try {
	        // Create header row
	        Row headerRow = sheet.createRow(0);
	        headerRow.createCell(0).setCellValue("Name");
	        headerRow.createCell(1).setCellValue("Roll Number");
	        headerRow.createCell(2).setCellValue("Branch");

	        // Add student data
	        int rowNum = 1;
	        for (Student student : students) {
	            Row row = sheet.createRow(rowNum++);
	            row.createCell(0).setCellValue(student.getName());
	            row.createCell(1).setCellValue(student.getRollNumber());
	            row.createCell(2).setCellValue(student.getBranch());
	        }

	        // Auto-size columns
	        for (int i = 0; i < 3; i++) {
	            sheet.autoSizeColumn(i);
	        }

	        // Write the workbook content to the output stream
	        workbook.write(out);
	    } catch (IOException e) {
	        Logger.error("Error occurred while creating Excel document: " + e.getMessage());
	    } finally {
	        // Close the workbook and ignore any exceptions
	        try {
	            workbook.close();
	        } catch (IOException e) {
	            Logger.error("Error occurred while closing Excel document: " + e.getMessage());
	        }
	    }

	    return new ByteArrayInputStream(out.toByteArray());
	}

//		public byte[] generateExcelDocument() throws IOException {
//	        List<Student> students = studentRepository.findAll();
//	        XSSFWorkbook workbook = new XSSFWorkbook();
//	        XSSFSheet sheet = workbook.createSheet("Students");
//
//	        int rowNumber = 0;
//	        for (Student student : students) {
//	            XSSFRow row = sheet.createRow(rowNumber++);
//	            row.createCell(0).setCellValue(student.get_id());
//	            row.createCell(1).setCellValue(student.getName());
//	            row.createCell(2).setCellValue(student.getRollNumber());
//	            row.createCell(3).setCellValue(student.getBranch());
//	            row.createCell(4).setCellValue(student.getContentType());
////	            row.createCell(5).setCellValue(student.getFileData());
//	        }
//
//	        ByteArrayOutputStream out = new ByteArrayOutputStream();
//	        workbook.write(out);
//	        workbook.close();
//
//	        return out.toByteArray();
//	    }


		

		

		

		

		

		
}




	
//	private List<Student> readDataFromExcel(MultipartFile file) throws IOException {
//	    Workbook workbook = WorkbookFactory.create(file.getInputStream());
//	    Sheet sheet = workbook.getSheetAt(0);
//	    List<Student> dataList = new ArrayList<>();
//
//	    for (Row row : sheet) {
//	    	Student data = new Student();
//
//	        Cell cell1 = row.getCell(1);
//	        if (cell1 != null) {
//	            if (cell1.getCellType() == CellType.STRING) {
//	                data.setName(cell1.getStringCellValue());
//	            } else if (cell1.getCellType() == CellType.NUMERIC) {
//	                data.setName(String.valueOf((int) cell1.getNumericCellValue()));
//	            }
//	        }
//	        
//	        Cell cell0 = row.getCell(0);
//	        if (cell0 != null) {
//	            if (cell0.getCellType() == CellType.NUMERIC) {
//	                data.set_id(String.valueOf(row.getCell(0).getStringCellValue()));
//	            }
//	        }
//	        
//
//	        Cell cell3 = row.getCell(3);
//	        if (cell3 != null) {
//	            if (cell3.getCellType() == CellType.STRING) {
//	                data.setBranch(cell3.getStringCellValue());
//	            }
//	        }
//
//	        Cell cell2 = row.getCell(2);
//	        if (cell2 != null) {
//	            if (cell2.getCellType() == CellType.STRING) {
//	                data.setRollNumber(cell2.getStringCellValue());
//	            }
//	        }
//
//	        dataList.add(data);
//	    }
//
//	    workbook.close();
//	    return dataList;
//	}

//	private List<Student> readDataFromExcel(MultipartFile file) throws IOException {
//	    Workbook workbook = WorkbookFactory.create(file.getInputStream());
//	    Sheet sheet = workbook.getSheetAt(0);
//	    List<Student> dataList = new ArrayList<>();
//	    
//
//	    for (Row row : sheet) {
//	        Student data = new Student();
//
//	        Cell cell1 = row.getCell(1);
//	        if (cell1 != null) {
//	            if (cell1.getCellType() == CellType.STRING) {
//	                data.setName(cell1.getStringCellValue());
//	            } else if (cell1.getCellType() == CellType.NUMERIC) {
//	                data.setName(String.valueOf((int) cell1.getNumericCellValue()));
//	            }
//	        }
//
//	        Cell cell0 = row.getCell(0);
//	        if (cell0 != null) {
//	            if (cell0.getCellType() == CellType.STRING) {
//	                data.set_id(cell0.getStringCellValue());
//	            } else if (cell0.getCellType() == CellType.NUMERIC) {
//	                data.set_id(String.valueOf((int) cell0.getNumericCellValue()));
//	            }
//	        }
//
//	        Cell cell3 = row.getCell(3);
//	        if (cell3 != null) {
//	            if (cell3.getCellType() == CellType.STRING) {
//	                data.setBranch(cell3.getStringCellValue());
//	            }
//	        }
//
//	        Cell cell2 = row.getCell(2);
//	        if (cell2 != null) {
//	            if (cell2.getCellType() == CellType.STRING) {
//	                data.setRollNumber(cell2.getStringCellValue());
//	            }
//	        }
//
//	        dataList.add(data);
//	    }
//
//	    workbook.close();
//	    return dataList;
//	}

	
//	public InputStream downloadFile(String fileId) throws IOException {
	    
//	}



	

